{"title":"ajax整理","slug":"ajax整理","date":"2017-05-30T11:11:30.000Z","updated":"2017-05-30T13:32:31.626Z","comments":true,"excerpt":"<p>用AJAX开发</p>","content":"<p>用AJAX开发</p>\n<a id=\"more\"></a>\n<p><img src=\"/img/一些常用的操作命令/top.jpg\" style=\"width:60%\"></p>\n<h2 id=\"ajax\"><a href=\"#ajax\" class=\"headerlink\" title=\"ajax\"></a>ajax</h2><blockquote>\n<p>局部刷新，与后台交互 </p>\n</blockquote>\n<h2 id=\"ajax介绍\"><a href=\"#ajax介绍\" class=\"headerlink\" title=\"ajax介绍\"></a>ajax介绍</h2><p>AJAX 是一种用于创建快速动态网页的技术。</p>\n<p>通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。</p>\n<hr>\n\n<h3 id=\"xhr\"><a href=\"#xhr\" class=\"headerlink\" title=\"xhr\"></a>xhr</h3><p>创建 xhr 对象<br>XMLHttpRequest 是 ajax 的基础。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">var xhr = new XMLHttpRequest();</div></pre></td></tr></table></figure>\n<p><em>P:实例中有兼容老版本创建方式</em></p>\n<blockquote>\n<p>所有现代浏览器均支持 XMLHttpRequest 对象（IE5 和 IE6 使用 ActiveXObject）。<br>XMLHttpRequest 用于在后台与服务器交换数据。</p>\n</blockquote>\n<h3 id=\"open\"><a href=\"#open\" class=\"headerlink\" title=\"open\"></a>open</h3><p>发送请求</p>\n<p>创建的xhr对象 向服务器发送请求<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">xhr.open(method,url,async&quot;);</div><div class=\"line\">xhr.send(data);</div></pre></td></tr></table></figure></p>\n<ul>\n<li>method: 规定请求的类型;常见的有”GET” 和 “POST”<blockquote>\n<p>区别：<br>GET 多用于信息获取 提交的数据会以查询参数的形式拼接在url后面 提交的数据最多只能1024字节<br>POST  提交的数据则放置在是HTTP包的包体中 没有提交数据量限制</p>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li>url: 文件在服务器上的位置</li>\n</ul>\n<ul>\n<li>async: true(异步)或 false(同步)<br>同步会等到服务器响应就绪才继续执行</li>\n</ul>\n<ul>\n<li>data: 先后台提交的数据或者查询参数</li>\n</ul>\n<p><em><br>(1).”GET方式提交的数据最多只能是1024字节”，因为GET是通过URL提交数据，那么GET可提交的数据量就跟URL的长度有直接关系了。而实际上，<strong>URL不存在参数上限的问题，HTTP协议规范没有对URL长度进行限制</strong>。这个限制是特定的浏览器及服务器对它的限制。注意这是限制是整个URL长度，而不仅仅是你的参数值数据长度。[见参考资料1]<br>(2).理论上讲，POST是没有大小限制的，HTTP协议规范也没有进行大小限制，说“POST数据量存在80K/100K的大小限制”是不准确的，POST数据是没有限制的，起限制作用的是服务器的处理程序的处理能力。[见参考资料1]\n</em></p>\n<h3 id=\"responseType\"><a href=\"#responseType\" class=\"headerlink\" title=\"responseType\"></a>responseType</h3><p>设置响应数据格式<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">xhr.responseType = dataType;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>dataType: 把服务器返回的数据以相应格式获得<br>常见格式：”json” “text” “xml” </li>\n</ul>\n<h3 id=\"onreadystatechange\"><a href=\"#onreadystatechange\" class=\"headerlink\" title=\"onreadystatechange\"></a>onreadystatechange</h3><p>当请求被发送到服务器时，我们需要执行一些基于响应的任务。<br>每当 readyState 改变时，就会触发 onreadystatechange 事件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">xhr.onreadystatechange = function () &#123;</div><div class=\"line\">    if (xhr.readyState === 4 &amp;&amp; xhr.status === 200) &#123;</div><div class=\"line\">        console.log(xhr.response);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>readyState 属性存有 xhr 的状态信息。从 0 到 4 发生变化。</p>\n<ul>\n<li>0: 请求未初始化</li>\n<li>1: 服务器连接已建立</li>\n<li>2: 请求已接收</li>\n<li>3: 请求处理中</li>\n<li>4: 请求已完成，且响应已就绪</li>\n</ul>\n<p>xhr.status: 网络状态 200: “OK” ,404: 未找到页面<br>xhr.response: 后台返回的数据</p>\n<hr>\n\n<h2 id=\"ajax-实例\"><a href=\"#ajax-实例\" class=\"headerlink\" title=\"ajax 实例\"></a>ajax 实例</h2><ul>\n<li>原生</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">var xhr = new XMLHttpRequest();</div><div class=\"line\">xhr.open(&apos;GET&apos;, &apos;usersInfo.json&apos;, true);</div><div class=\"line\">xhr.onreadystatechange = function () &#123;</div><div class=\"line\">    if (this.readyState === 4 &amp;&amp; /^2\\d&#123;2&#125;$/.test(this.status)) &#123;</div><div class=\"line\">        console.log(this.response);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">xhr.send(&#123;name: &quot;ajax&quot;&#125;);</div></pre></td></tr></table></figure>\n<ul>\n<li>jquery<br>更多参数[见参考资料2]</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.ajax(&#123;</div><div class=\"line\">    url: &apos;usersInfo.json&apos;,</div><div class=\"line\">    type: &apos;GET&apos;,</div><div class=\"line\">    dataType: &apos;json&apos;,</div><div class=\"line\">    data: &#123;</div><div class=\"line\">        name: &apos;ajax&apos;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    success: function (result) &#123;</div><div class=\"line\">        console.log(result)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"ajax-封装\"><a href=\"#ajax-封装\" class=\"headerlink\" title=\"ajax 封装\"></a>ajax 封装</h2><ul>\n<li>封装原生ajax(解决兼容)</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div></pre></td><td class=\"code\"><pre><div class=\"line\">~function () &#123;</div><div class=\"line\">    // 创建ajax对象兼容写法</div><div class=\"line\">    function getXhr() &#123;</div><div class=\"line\">        let xhr = null;</div><div class=\"line\">        let ary = [function () &#123;</div><div class=\"line\">            return new XMLHttpRequest();</div><div class=\"line\">        &#125;, function () &#123;</div><div class=\"line\">            return new ActiveXObject(&apos;Microsoft.XMLHTTP&apos;);</div><div class=\"line\">        &#125;, function () &#123;</div><div class=\"line\">            return new ActiveXObject(&apos;Msxml2.XMLHTTP&apos;);</div><div class=\"line\">        &#125;, function () &#123;</div><div class=\"line\">            return new ActiveXObject(&apos;Msxml3.XMLHTTP&apos;);</div><div class=\"line\">        &#125;];</div><div class=\"line\"></div><div class=\"line\">        for (let i = 0; i &lt; ary.length; i++) &#123;</div><div class=\"line\">            let curFn = ary[i];</div><div class=\"line\">            try &#123;</div><div class=\"line\">                xhr = curFn();</div><div class=\"line\">                getXhr = curFn;</div><div class=\"line\">                break;</div><div class=\"line\">            &#125; catch (e) &#123;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        if (!xhr) &#123;</div><div class=\"line\">            throw Error(&apos;浏览器版本太低 请升级~&apos;);</div><div class=\"line\">        &#125;</div><div class=\"line\">        return xhr;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    function ajax(options) &#123;</div><div class=\"line\">        let _defaultOptions = &#123;</div><div class=\"line\">            url: null,</div><div class=\"line\">            type: &apos;GET&apos;,</div><div class=\"line\">            async: true,</div><div class=\"line\">            cache: true,</div><div class=\"line\">            dataType: &apos;text&apos;,</div><div class=\"line\">            data: null,</div><div class=\"line\">            timeout: null,</div><div class=\"line\">            success: null,</div><div class=\"line\">            error: null</div><div class=\"line\">        &#125;;</div><div class=\"line\">        // 默认参数进行合并</div><div class=\"line\">        for (let attr in options) &#123;</div><div class=\"line\">            if (options.hasOwnProperty(attr)) &#123;</div><div class=\"line\">                _defaultOptions[attr] = options[attr];</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        // get 缓存问题</div><div class=\"line\">        if (_defaultOptions.type.toUpperCase() === &apos;GET&apos;) &#123;// 判断是get请求</div><div class=\"line\">            // 解决缓存 拼接前判断当前url需不需要拼接&apos;?&apos; cache 为 false 说明 不需要缓存</div><div class=\"line\"></div><div class=\"line\">            // 需不需要缓存  如果需要缓存 并且 需不需要 拼接&apos;?&apos;</div><div class=\"line\">            if (!_defaultOptions.cache &amp;&amp; _defaultOptions.url.indexOf(&apos;?&apos;) &gt; -1) &#123;</div><div class=\"line\">                _defaultOptions.url += &apos;_=&apos; + new Date().getTime();</div><div class=\"line\">            &#125; else if (!_defaultOptions.cache) &#123;</div><div class=\"line\">                _defaultOptions.url += &apos;?_=&apos; + new Date().getTime();</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            // get请求中 数据传输问题 需要将数据以 url?name=liwenli&amp;id=1</div><div class=\"line\">            //  console.log(_defaultOptions.data); // &#123;id: 24, name: &quot;lwl&quot;&#125;</div><div class=\"line\">            let data = _defaultOptions.data;</div><div class=\"line\">            if (_defaultOptions.data) &#123;</div><div class=\"line\">                for (let attr in data) &#123;</div><div class=\"line\">                    if (_defaultOptions.url.indexOf(&apos;?&apos;) &gt; -1) &#123;</div><div class=\"line\">                        _defaultOptions.url += &apos;&amp;&apos; + attr + &apos;=&apos; + data[attr];</div><div class=\"line\">                    &#125; else &#123;</div><div class=\"line\">                        _defaultOptions.url += &apos;?&apos; + attr + &apos;=&apos; + data[attr];</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        // 创建ajax 对象</div><div class=\"line\">        let xhr = getXhr();</div><div class=\"line\">        xhr.responseType = _defaultOptions.dataType; // 设置响应内容解析类型</div><div class=\"line\"></div><div class=\"line\">        xhr.open(_defaultOptions.type, _defaultOptions.url, _defaultOptions.async);</div><div class=\"line\"></div><div class=\"line\">        // 超时设置</div><div class=\"line\">        xhr.timeout = _defaultOptions.timeout;</div><div class=\"line\">        xhr.ontimeout = _defaultOptions.error;</div><div class=\"line\"></div><div class=\"line\">        xhr.onreadystatechange = function () &#123;</div><div class=\"line\">            if (this.readyState === 4 &amp;&amp; /^2\\d&#123;2&#125;$/.test(this.status)) &#123;</div><div class=\"line\">                if (typeof _defaultOptions.success === &apos;function&apos;) &#123;</div><div class=\"line\">                    _defaultOptions.success.call(_defaultOptions, this.response);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\"></div><div class=\"line\">        xhr.send(JSON.stringify(_defaultOptions.data)); // post 请求需要通过 请求体向后台传输数据</div><div class=\"line\">        console.log(_defaultOptions);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    window.$ = &#123;ajax&#125;;</div><div class=\"line\">&#125;();</div></pre></td></tr></table></figure>\n<ul>\n<li>封装原生ajax(简单封装)</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">(function (win) &#123;</div><div class=\"line\">    function ajax(&#123;type = &apos;GET&apos;, dataType = &apos;json&apos;, async = true, url = &quot;&quot;, data = null&#125;) &#123;</div><div class=\"line\">        return new Promise((resolve, reject) =&gt; &#123;</div><div class=\"line\">            let xhr = new XMLHttpRequest();</div><div class=\"line\">            xhr.open(type, url, async);</div><div class=\"line\">            xhr.responseType = dataType;</div><div class=\"line\"></div><div class=\"line\">            xhr.onload = function () &#123;</div><div class=\"line\">                resolve(xhr.response);</div><div class=\"line\">            &#125;;</div><div class=\"line\">            xhr.send(data); //formData</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    win.ajax = ajax;</div><div class=\"line\">&#125;)(window);</div></pre></td></tr></table></figure>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p>[1].<a href=\"http://blog.csdn.net/somat/archive/2004/10/29/158707.aspx\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/somat/archive/2004/10/29/158707.aspx</a><br>[2].<a href=\"http://www.w3school.com.cn/jquery/ajax_ajax.asp\" target=\"_blank\" rel=\"external\">http://www.w3school.com.cn/jquery/ajax_ajax.asp</a></p>\n<hr>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>ajax 向后台发送请求的方式 method 还有很多种，每种之间的差异需要再找资料区别<br>xhr.send(data) 向后台发送数据的类型还有限制 目前接触的还少 </p>\n<h2 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h2><p><a href=\"https://gggoe.github.io/\"><img src=\"https://img.shields.io/badge/author-gggoe-green.svg?style=flat-square\" alt=\"Author\"></a><br><a href=\"http://wpa.qq.com/msgrd?v=3&amp;uin=2449602607&amp;site=qq&amp;menu=yes\" target=\"_blank\" rel=\"external\"><img src=\"https://img.shields.io/badge/QQ-2449602607-blue.svg?style=flat-square\" alt=\"QQ\"></a><br><a href=\"mailto:gggoe@qq.com\" target=\"_blank\" rel=\"external\"><img src=\"https://img.shields.io/badge/Email-gggoe@qq.com-yellow.svg?style=flat-square\" alt=\"Email\"></a><br><a href=\"https://github.com/gggoe\" target=\"_blank\" rel=\"external\"><img src=\"https://img.shields.io/badge/github-gggoe-red.svg?style=flat-square\" alt=\"github\"></a></p>\n","thumbnail":"/img/ajax整理/cover.jpg","primarycolor":"blueGrey","accentcolor":"blueGrey","categories":[{"name":"笔记","path":"api/categories/笔记.json"}],"tags":[{"name":"ajax","path":"api/tags/ajax.json"},{"name":"js","path":"api/tags/js.json"}]}